using System;
using System.Diagnostics;
using System.IO;
using System.Net.Http;
using HtmlAgilityPack;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using System.Management.Automation.Runspaces;

class Program{
    static IConfigurationRoot? Configuration;

    static async Task Main(){
        string desktopPath= Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
        string logFilePath= Path.Combine(desktopPath, "WinVulScan.txt");
        using (StreamWriter writer = new StreamWriter(logFilePath, false)){
            await WriteToFile(writer,
                "systeminfo",
                "wmic qfe get Caption,Description,HotFixID,InstalledOn",
                "wmic os get osarchitecture ; echo $env:PROCESSOR_ARCHITECTURE",
                "Get-NetConnectionProfile",
                "Get-PSDrive | where {$_.Provider -like '*FileSystem*'} | ft Name,Root",
                "Get-WmiObject -Class Win32_UserAccount",
                "Get-LocalUser | ft Name,Enabled,LastLogon",
                @"Get-ChildItem C:\Users -force | select Name",
                "Get-LocalGroupMember Administrators | ft Name, PrincipalSource",
                "cmdkey /list",
                "qwinsta",
                "net accounts",
                "net share",
                "ipconfig /all",
                "Get-NetIPConfiguration | ft InterfaceAlias,InterfaceDescription,IPv4Address",
                "Get-DnsClientServerAddress -AddressFamily IPv4 | ft",
                "netsh wlan show profile",
                "route print",
                "Get-NetRoute -AddressFamily IPv4 | ft DestinationPrefix,NextHop,RouteMetric,ifIndex",
                "arp -a",
                "Tasklist /SVC",
                "net start",
                "wmic service list brief",
                "Get-Service",
                "driverquery",
                "driverquery /SI");

            try{
                string msrcVuln = await GetMsrcVuln();
                writer.WriteLine("Microsoft Security Response Center Vulnerabilities:");
                writer.WriteLine(msrcVuln);
            }
            catch (Exception ex){
                writer.WriteLine("Error fetching vulnerability information: " + ex.Message);
                writer.WriteLine("No vulnerability information found");
            }

            string apiKey = Configuration?.GetSection("GoogleCustomSearch:ApiKey")?.Value; //Your own Google API Key needs to be entered in the json file
            string searchEngineId = Configuration?.GetSection("GoogleCustomSearch:SearchEngineId")?.Value; //Your own Custom Google Search ID needs to be entered in the json file

            if (apiKey == null || searchEngineId == null){
                writer.WriteLine("API Key or search engine ID is missing from appsettings.json");
            }
            else{
                string googleResults = await GoogleVuln("Windows OS vulnerabilities", apiKey, searchEngineId);
                writer.WriteLine("Google Search Results for Vulnerabilities:");
                writer.WriteLine(googleResults);
            }

            string envVariables= CheckEnvironmentVariables();
            writer.WriteLine("Environment Variables:");
            writer.WriteLine(envVariables);
            Console.WriteLine("System information and vulnerability details saved to WinVulScan.txt on the desktop.");
        }
    }

    static Program(){
        Configuration= new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json")
            .Build();
    }

    static async Task WriteToFile(StreamWriter writer, params string[] commands){
        foreach (string command in commands){
            string output = ExecutePowerShellCommand(command);
            writer.WriteLine($"Command: {command}");
            writer.WriteLine(output);
            writer.WriteLine(new string('-', 80));
        }
    }

    static async Task<string> GetMsrcVuln(){
        string url= "https://msrc.microsoft.com/update-guide/vulnerability";
        string html;

        using (HttpClient client = new HttpClient()){
            html= await client.GetStringAsync(url).ConfigureAwait(false);
        }

        HtmlDocument doc = new HtmlDocument();
        doc.LoadHtml(html);

        var nodes= doc.DocumentNode.SelectNodes("//div[@class='vuln-details']");

        if (nodes != null){
            var vulnerabilities = nodes.Select(node => node.InnerText.Trim());
            return string.Join("\n", vulnerabilities);
        }

        return "No vulnerability information found";
    }

    static async Task<string> GoogleVuln(string query, string apiKey, string searchEngineId){
        using (HttpClient client = new HttpClient()){
            string url= $"https://www.googleapis.com/customsearch/v1?key={apiKey}&cx={searchEngineId}&q={Uri.EscapeDataString(query)}";
            string result= await client.GetStringAsync(url).ConfigureAwait(false);
            return result;
        }
    }

    static string CheckEnvironmentVariables(){
        string output = RunPowerShellScript("Get-ChildItem Env: | Format-Table -Property Key,Value -AutoSize");
        return output;
    }

    static string ExecutePowerShellCommand(string command){
        string output = RunPowerShellScript(command);
        return output;
    }
    static string RunPowerShellScript(string script){
        ProcessStartInfo psi = new ProcessStartInfo{
            FileName= "powershell",
            Arguments= $"-NoProfile -ExecutionPolicy unrestricted -command \"{script}\"",
            RedirectStandardOutput= true,
            UseShellExecute= false,
            CreateNoWindow= true
        };
        using (Process process = new Process{StartInfo = psi}){
            process.Start();
            return process.StandardOutput.ReadToEnd();
        }
    }
}
